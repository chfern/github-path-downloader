/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.fc.githubpathdownloader

import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.ExperimentalCli
import kotlinx.cli.default
import org.fc.githubpathdownloader.model.rpc.RpcException
import org.fc.githubpathdownloader.service.FileDownloaderService
import org.fc.githubpathdownloader.service.GithubDownloaderService
import java.util.concurrent.Executors

class App {
    companion object {
        const val NAME = "Github Downloader"
        const val VERSION = "1.0.0"
    }
}

@ExperimentalCli
fun main(args: Array<String>) {
    println("${App.NAME}:: ${App.VERSION}")

    val parser = ArgParser("${App.NAME}:: ${App.VERSION}")
    val version by parser.option(ArgType.Boolean, shortName = "V", description = "Version").default(false)
    val username: String? by parser.option(ArgType.String, shortName = "U", fullName = "username", description = "Github Username (required)")
    val repository: String? by parser.option(ArgType.String, shortName = "R", fullName = "repository", description = "Github Repository (required)")
    val path: String? by parser.option(ArgType.String, shortName = "p", fullName = "path", description = "Path, E.g: folder/nested")
    val ref: String? by parser.option(ArgType.String, shortName = "r", fullName = "ref", description = "Ref")
    val githubToken: String? by parser.option(ArgType.String, shortName = "t", fullName = "token", description = "Github Token with repo read access")

    parser.parse(args)

    if (version) println(App.VERSION)

    val TOKEN_ENV_KEY = "GITHUB_REPO_ACCESS_TOKEN";
    val token = githubToken ?: System.getenv(TOKEN_ENV_KEY)

    if (username == null || repository == null) {
        println("Username and repository is required")
        System.exit(0)
        return
    }

    if (token == null) {
        println("Token must be provided either from command line arg or ${TOKEN_ENV_KEY} env variable")
        System.exit(0)
        return
    }

    GithubDownloaderService(token,
            username!!,
            repository!!,
            path,
            ref,
            Executors.newCachedThreadPool(),
            FileDownloaderService()
    ).execute(object : GithubDownloaderService.OnCompleteHandler {
        override fun onComplete() {
            println("Finished")
            System.exit(0)
        }

        override fun onException(rpcException: RpcException) {
            println("Error: ${rpcException.errorMessage}")
            System.exit(0)
        }
    })
}